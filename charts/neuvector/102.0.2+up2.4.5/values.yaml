# Default values for neuvector.
# This is a YAML-formatted file.
# Declare variables to be passed into the templates.

global:
  cattle:
    psp:
      enabled: false # PSP enablement should default to false for Kubernetes v1.25+
    systemDefaultRegistry: 
    url: # URL for Rancher Server. Will be auto populated if rancherSSO: true

oem:
openshift: false
# Optional. Uncomment below option only if running NeuVector in GKE.  This will enable GKE-specific CIS benchmarks.
platformInfo: #Kubernetes:GKE
rancherSSO:
  enabled: true
rbac: true
registry:
serviceAccount: neuvector

admissionwebhook:
  type: ClusterIP

crdwebhook:
  enabled: true
  type: ClusterIP

customUserRoles:
# Optional. Default NeuVector user roles of 'admin', 'reader', and 'ciops' exist by default.
  enabled: false
  createAsSecret:
  # If false, will create custom user roles as a ConfigMap resource instead of a Secret 
    enabled: false
  roles:
  - roleName: demo1
    roleID: rt_scan
  #  roleDescription: demo1 (optional)
  #  read: true (optional)
  #  write: true (optional)
  - roleName: demo2
    roleID: security_events
  #  roleDescription: demo2 (optional)
  #  read: true (optional)

externalAuthProvider:
# Optional. Use external provider for NeuVector authentication
  enabled: false
  provider: # Option is one of: 'ldap', 'oidc', or 'saml'
  config: |


internal:
  certmanager:
    enabled: false
    secretname: neuvector-internal

localPasswordProfile:
  enabled: false
  # Optional settings to create a password policy for local user accounts. A default policy will be created if 'localUsers' is set to 'enabled'.
  # All 'localPasswordProfile' fields are optional
  createAsSecret:
  # If false, will create password profile as a ConfigMap resource instead of a Secret 
    enabled: false
  expireAfter:     # (in days) Defaults to 0
  expireEnabled:   # Defaults to 'false'
  historyCount:    # Defaults to '0'
  historyEnabled:  # Defaults to 'false'
  lockoutAttempts: # Defaults to 0
  lockoutDuration: # (in minutes) Defaults to 0
  lockoutEnabled:  # Defaults to 'false'
  minLength:       # Defaults to '6'
  minLowercase:    # Defaults to '0'
  minNumeric:      # Defaults to '0'
  minSpecialChar:  # Defaults to '0'
  minUppercase:    # Defaults to '0'

localUsers:
  enabled: false
  users:
  - username:
    password:
    role:
    #email: (optional)
    #locale: en (optional)
    #roleDomains: (optional)
    #  admin:
    #    - admin1
    #    - admin2
    #  reader:
    #    - reader1
    #    - reader2

monitoring:
  enabled: false
  exporter:
    enabled: true
    image:
      repository: neuvector/prometheus-exporter
      tag: latest
      pullPolicy:
    credentials:
      # This is a local read-only user account
      Fullname: monitoring
      Password: Pr0m3th3u$
    apiSvc: neuvector-svc-controller-api:10443
    svc:
      enabled: true
      type: ClusterIP
      loadBalancerIP: ''
    grafanaDashboard:
      enabled: true
      scrapeEnforcerMetrics: false # Enforcer metrics scraping is disabled by default for performance reasons. 
      namespace:
      labels: {}
    serviceMonitor:
      enabled: true
      # labels for the ServiceMonitor
      labels: {}
      # annotations for the ServiceMonitor
      annotations: {}
      # Scrape interval. If not set, the Prometheus default scrape interval is used.
      interval: ""
      # MetricRelabelConfigs to apply to samples after scraping, but before ingestion.
      # ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#relabelconfig
      metricRelabelings: []
      # RelabelConfigs to apply to samples before scraping
      # ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#relabelconfig
      relabelings: []

systemSettings:
  createAsSecret:
  # If false, will create system settings as a ConfigMap resource instead of a Secret 
    enabled: false
  autoScan:         # Defaults to 'false'. Enables auto-scanning of discovered assets
  clusterName:      # Defaults to 'cluster.local'
  containerRuntime: # Options are 'bottlerocket', 'containerd', 'crio', 'docker', 'k3s', or 'rke2'
  createLocalAdmin: # Create default local 'admin' account
    create: true
    password:       # Password is minimum of: 8 characters, 1 uppercase, 1 lowercase, 1 number, and 1 special character
  newServiceMode:   # Defaults to 'Discover'. Options are: 'Discover', 'Monitor', or 'Protect'
  noTelemetryReport: false # Sends anonymous NeuVector telemetry data
  unusedGroupAging: # Defaults to '24'. Interval, in hours, that empty container groups will be purged
  # Zero-drift automatically allows only processes which originate from the parent process that is in the original container image, and does not allow file updates or new files to be installed
  zeroDrift:        # Defaults to 'zero-drift'. Options are 'basic' or 'zero-drift'
  imagePullSecret:
  # Enable to create/use image registry secret for image pulls
    enabled: false
    registry: 
    username: 
    password: 
    email:
  notificationWebhooks:
  # Optional settings for sending notifications via webhook (can create more than one)
    enabled: false
    webhooks:
      - name:
        url:
        type:   # Valid options are: 'JSON', 'Key-Value Pairs', 'MS Teams', or 'Slack' 
        enable: # Defaults to 'true'
  registryProxy:
  # Optional settings for proxy information used to connect to external container registries
    http:
      enabled: false
      httpProxy:
        url:
        username: # Optional. Reccomend to enable 'createAsSecret' option if populating these values
        password: # Optional
    https:
      enabled: false
      httpsProxy:
        url:
        username: # Optional. Reccomend to enable 'createAsSecret' option if populating these values
        password: # Optional    
  scannerAutoscale:
    customize: false
  # Scanner autoscaling details can be found at: https://open-docs.neuvector.com/scanning/scanners#auto-scaling-of-scanner-pods
    maxPods: 3
    minPods: 1
    scalingStrategy: delayed  # Defaults to 'delayed'. Options are: 'delayed' and 'immediate'    
  syslog:
  # Optional settings for forwarding events to Syslog server
    enabled: false
    categories: [ audit, event, security-event ] # Any syslog category is optional
    jsonOutput: # 'true' or 'false'
    logLevel:   # Defaults to 'Info'. Options are: 'Alert', 'Critical', 'Error', 'Info', 'Warning', 'Notice', or 'Debug'
    protocol:   # Options are: 'tcp' or 'udp'
    serverIP:   # IPv4 address or FQDN
    serverPort: # Defaults to '514'

controller:
  enabled: true
  tolerateControlPlane: false
  annotations: {}
  image:
    repository: rancher/mirrored-neuvector-controller
    tag: 5.1.3
    hash:
    pullPolicy:    
  replicas: 1
  podLabels: {}
  podAnnotations: {}
  env: []
  tolerations: []
  nodeSelector: {}
  apisvc:
    type: ClusterIP
    annotations: {}
    # OpenShift Route configuration
    # Controller supports HTTPS only, so edge termination not supported
    route:
      enabled: false
      termination: passthrough
      host:
      tls:
        #certificate: |
        #  -----BEGIN CERTIFICATE-----
        #  -----END CERTIFICATE-----
        #caCertificate: |
        #  -----BEGIN CERTIFICATE-----
        #  -----END CERTIFICATE-----
        #destinationCACertificate: |
        #  -----BEGIN CERTIFICATE-----
        #  -----END CERTIFICATE-----
        #key: |
        #  -----BEGIN PRIVATE KEY-----
        #  -----END PRIVATE KEY-----
  pvc: # NeuVector PVC *requires* ReadWriteMany (RWX). Capacity is 1Gi
    enabled: false
    existingClaim: false
    storageClass: 

  azureFileShare:
    enabled: false
    secretName:
    shareName:

  certificate:
    secret:
    keyFile: tls.key
    pemFile: tls.pem

  internal: # this is used for internal communication. Please use the SAME CA for all the components ( controller, scanner, and enforcer ) The cert needs to have a CN of "NeuVector"
    certificate:
      secret:
      keyFile: cert.key
      pemFile: cert.pem
      caFile: ca.cert # must be the same CA for all internal.

  federation:
    mastersvc:
      type:
      # Federation Master Ingress
      ingress:
        enabled: false
        host:  # MUST be set, if ingress is enabled
        ingressClassName: ""
        path: "/"  # or this could be "/api", but might need "rewrite-target" annotation
        annotations:
          nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          # ingress.kubernetes.io/rewrite-target: /
        tls: false
        secretName:
      annotations: {}
      # OpenShift Route configuration
      # Controller supports HTTPS only, so edge termination not supported
      route:
        enabled: false
        termination: passthrough
        host:
        tls:
          #certificate: |
          #  -----BEGIN CERTIFICATE-----
          #  -----END CERTIFICATE-----
          #caCertificate: |
          #  -----BEGIN CERTIFICATE-----
          #  -----END CERTIFICATE-----
          #destinationCACertificate: |
          #  -----BEGIN CERTIFICATE-----
          #  -----END CERTIFICATE-----
          #key: |
          #  -----BEGIN PRIVATE KEY-----
          #  -----END PRIVATE KEY-----

    managedsvc:
      type:
      # Federation Managed Ingress
      ingress:
        enabled: false
        host:  # MUST be set, if ingress is enabled
        ingressClassName: ""
        path: "/"  # or this could be "/api", but might need "rewrite-target" annotation
        annotations:
          nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          # ingress.kubernetes.io/rewrite-target: /
        tls: false
        secretName:
      annotations: {}
      # OpenShift Route configuration
      # Controller supports HTTPS only, so edge termination not supported
      route:
        enabled: false
        termination: passthrough
        host:
        tls:
          #certificate: |
          #  -----BEGIN CERTIFICATE-----
          #  -----END CERTIFICATE-----
          #caCertificate: |
          #  -----BEGIN CERTIFICATE-----
          #  -----END CERTIFICATE-----
          #destinationCACertificate: |
          #  -----BEGIN CERTIFICATE-----
          #  -----END CERTIFICATE-----
          #key: |
          #  -----BEGIN PRIVATE KEY-----
          #  -----END PRIVATE KEY-----

  ingress:
    enabled: false
    host:  # MUST be set, if ingress is enabled
    ingressClassName: ""
    path: "/"  # or this could be "/api", but might need "rewrite-target" annotation
    annotations:
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      # ingress.kubernetes.io/rewrite-target: /
    tls: false
    secretName:
  resources: {}

enforcer:
  enabled: true
  tolerateControlPlane: false
  image:
    repository: rancher/mirrored-neuvector-enforcer
    tag: 5.1.3
    hash:
    pullPolicy:    
  podLabels: {}
  podAnnotations: {}
  tolerations: []
  resources: {}
  internal: # this is used for internal communication. Please use the SAME CA for all the components ( controller, scanner, and enforcer ) The cert needs to have a CN of "NeuVector"
    certificate:
      secret:
      keyFile: cert.key
      pemFile: cert.pem
      caFile: ca.cert # must be the same CA for all internal.
      
manager:
  enabled: true
  image:
    repository: rancher/mirrored-neuvector-manager
    tag: 5.1.3
    hash:
    pullPolicy:
  env:
    ssl: true
  svc:
    type: ClusterIP
    loadBalancerIP:
    annotations: {}
      # azure
      # service.beta.kubernetes.io/azure-load-balancer-internal: "true"
      # service.beta.kubernetes.io/azure-load-balancer-internal-subnet: "apps-subnet"
  # OpenShift Route configuration
  # Make sure manager env ssl is false for edge termination
  route:
    enabled: true
    termination: passthrough
    host:
    tls:
      #certificate: | 
      #  -----BEGIN CERTIFICATE-----
      #  -----END CERTIFICATE-----
      #caCertificate: | 
      #  -----BEGIN CERTIFICATE-----
      #  -----END CERTIFICATE-----
      #destinationCACertificate: | 
      #  -----BEGIN CERTIFICATE-----
      #  -----END CERTIFICATE-----
      #key: | 
      #  -----BEGIN PRIVATE KEY-----
      #  -----END PRIVATE KEY-----
  certificate:
    secret:
    keyFile: tls.key
    pemFile: tls.pem
  ingress:
    enabled: false
    host:  # MUST be set, if ingress is enabled
    ingressClassName: ""
    path: "/"
    annotations:
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      # kubernetes.io/ingress.class: my-nginx
      # nginx.ingress.kubernetes.io/whitelist-source-range: "1.1.1.1"
      # nginx.ingress.kubernetes.io/rewrite-target: /
      # nginx.ingress.kubernetes.io/enable-rewrite-log: "true"
      # only for end-to-end tls conf - ingress-nginx accepts backend self-signed cert
    tls: false
    secretName:  # my-tls-secret
  resources: {}
  affinity: {}
  podLabels: {}
  podAnnotations: {}
  tolerations: []
  nodeSelector: {}
  # node-role.kubernetes.io/control-plane: 'true'
  runAsUser:  # MUST be set for CIS 1.6 hardened Rancher clusters
  
cve:
  updater:
    enabled: true
    secure: false
    image:
      repository: rancher/mirrored-neuvector-updater
      tag: latest
      hash:
    schedule: "0 0 * * *"
    podLabels: {}
    podAnnotations: {}
    nodeSelector: {}
    # node-role.kubernetes.io/control-plane: 'true'
    runAsUser:  # MUST be set for CIS 1.6 hardened Rancher clusters
  scanner:
    enabled: true
    dockerPath: ""
    image:
      repository: rancher/mirrored-neuvector-scanner
      tag: latest
      hash:
    resources: {}
    affinity: {}
    podLabels: {}
    podAnnotations: {}
    tolerations: []
    nodeSelector: {}
    # node-role.kubernetes.io/control-plane: 'true'
    runAsUser:  # MUST be set for CIS 1.6 hardened Rancher clusters
    internal: # this is used for internal communication. Please use the SAME CA for all the components ( controller, scanner, and enforcer ) The cert needs to have a CN of "NeuVector"
      certificate:
        secret:
        keyFile: cert.key
        pemFile: cert.pem
        caFile: ca.cert # must be the same CA for all internal.